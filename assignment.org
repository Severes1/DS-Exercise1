#+TITLE: Exercise 1: Client/Server application
* We want to design and implement a distributed service (using POSIX message queues) that allows to store triplets <key-value1-value2>. 
* The key will be an integer (int) 
* the values associated with the key will be a string (maximum 256 bytes, including the 0 code that indicates the end of the string) and a float number.
* Keep in mind that, it is also considered an error, for example, that an error occurs in the message passing system 
** (non-existent queues, errors when sending data to a queue, errors when receiving data from queues, etc.).
* All the above operations must be done atomicly in the server side.
* Design and implement, using exclusively POSIX message queues and the programming language C, the system that implements this service
* TODO Design the system
** Server is stateful, however connectionless (no client specific data)
** Server message queue will be named /SERVER
** Clients will choose their own unique names and send them with each request
** Messages will have a fixed size of [300] bytes be structured as follows:
*** char type/status            1 byte
**** REQUEST: This indicates which interface function is being requested
***** 0: init
***** 1: set_value
***** 2: get_value
***** 3: modify_value
***** 4: delete_key
***** 5: num_items
**** RESPONSE: This is the status of the request
*****  0: success
***** -1: error (these can be more specific)
*** int key/count               4 bytes
**** REQUEST: this is the key of the element requested
**** RESPONSE: (only applicable to num_items) The number of items in the database
*** char[256] value1          256 bytes
**** This represents the string value that is stored or will be stored in the database
*** float value2                4 bytes
**** This represents the float value that is stored or will be stored in the database
*** char[32] return_queue      35 bytes
**** REQUEST: the message queue to which the server should write its response
**** RESPONSE: ignored
** Timing:
*** Server will launch first. Clients must wait for /SERVER message queue to exist.
*** Client sends request, Server responds. 
* TODO Develop the server code (server.c) responsible for managing the data structures that store the key-value1-value2 elements. 
** You can choose the data structure that is considered appropriate, as long as it does not impose a limit on the number of elements that can be stored. 
** The developed server must be concurrent.
** DONE Choose data structure to store data.
*** DONE analyze the uses (design the database!)
*** Must be
**** Infinitely extensible (sounds like a linked list, honestly)
**** Quickly indexable by key (sounds like a hash table)
**** Countable (maybe keep a counter to avoid having to do this?)
**** Concurrently modifiable (...*gulp*...)
**** Tree Map!
***** Delete functions as follows:
****** Promote right node, and add left node as leaf to leftmost on the right
****** ^Most confusing sentence ever
** TODO Implement message queue on server side
*** When receive, spawn thread to generate response
* TODO Develop the code that implements the previous services (init, set_value, get_value, delete_key, modify_value and num-items). 
*** The code will be developed on the file named keys.c. 
*** This is the code that the interface offers to the clients and is responsible for implementing the previous services (on the client side) by contacting the previous server. 
*** From this implementation, a static library called libkeys.a must be created. 
*** This will be the library that user applications will use to use the service. 
*** You must research and find a way to create such a library.
** TODO int init().
*** This call allows the initialization of the system. Through this service, all triples that were stored are destroyed. The function returns 0 on success and -1 on error.
** TODO int set_value(int key, char *value1, float value2).
*** This service inserts the element <key, value1, value2>. The service returns 0 if it was inserted successfully and -1 in case of error. 
*** It is considered an error to try to insert a key that already exists.
** TODO int get_value(int key, char *value1, float *value2). 
*** This service allows you to obtain the values associated with the key. The values are returned in value1 and value2. 
*** The function returns 0 on success and -1 on error, for example, if there is no element with that key.
** TODO int modify_value(int key, char *value1, float *value2). 
*** This service allows modifying the values associated with a key. The function returns 0 on success and -1 on error, for example, if there is no element with that key.
** TODO int delete_key(int key). 
*** This service allows you to delete the element whose key is key. The function returns 0 on success and -1 on error. In case the key does not exist, -1 is also returned.
** TODO int num_items(). 
*** This service returns the number of items stored on the server. The call returns -1 in case of error.
* TODO Develop a code example of a client (client.c) that uses the above functions. 
** The executable of this program has to be generated using the library developed in the previous section, 
** that is, the code of this client must be linked to the previous static library. 
** This client will be used to  test the developed service and must make the invocations to the API of key-value pairs that it considers appropriate. 
** The code included in client.c may only include calls to the services implemented and described above. There cannot be any reference to message queues in it.
* TODO Prepare a test plan for the service developed. This plan will be tested with the code developed in the previous section.
